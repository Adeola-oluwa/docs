---
title: "Fly Machines API"
layout: docs
nav: machines
version: 1.0
spec: OAS 3.0.1
toc: false
---

## Introduction

Fly Machines are the compute behind the Fly.io platform. They are fast-launching VMs that can be started and stopped at subsecond speeds. A Machine is the configuration and state for a single VM running on our platform. Every Machine will belong to a Fly App; Apps can have more than one Machine. Read more [here](/docs/machines/).

The Machines REST API allows you to provison and manage Apps, Machines and Volumes on the Fly.io platform. To manage other Fly.io resources like organizations, use the [GraphQL API](/docs/networking/custom-domains-with-fly/#graphql-api-notes).

## Authentication

All requests must include the Fly API Token in the HTTP Headers as follows:

```
Authorization: Bearer [TOKEN]
```

You can get your API token using [flyctl](/docs/hands-on/install-flyctl/) by running `fly auth token`

## Base URL

The easiest (and recommended) way to connect to the Machines API is to use the `public api.machines.dev` endpoint, a simpler and more performant alternative to connecting over WireGuard. You can still access your Machines directly over a WireGuard VPN, and use the private Machines API endpoint: `http://_api.internal:4280`. This method requires more setup.

Follow the [instructions](/docs/networking/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly.io [IPv6 private network](/docs/networking/private-networking/). Once you’re connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`

## Response Codes

The API uses conventional HTTP status codes to signal whether a request was successful or not.

Typically, 2xx HTTP status codes denote successful operations, 4xx codes imply failures related to the user, and 5xx codes suggest problems with the infrastructure.

| Status | Description                                 |
|--------|---------------------------------------------|
| `200`  | Successful request.                         |
| `201`  | Created successfully.                       |
| `202`  | Successful request. No content.             |
| `400`  | Check that the parameters were correct.     |
| `401`  | The API key used was missing or invalid.    |
| `404`  | The resource was not found.                 |
| `5xx`  | Indicates an error with Fly.io API servers. |

---

## Apps​

<div class="api-section" data-exclude-render>
  <div class="left-column">
    <p class="api-info">
      A Fly App is an abstraction for a group of Machines running your code on Fly.io, along with the configuration, provisioned resources, and data we need to keep track of to run and route to your Machines. Read more <a href="/docs/reference/apps/">here</a>.
    </p>
  </div>
  <div class="right-column">
    <div class="endpoints api-card">
      <div class="api-card-header">
        Endpoints
      </div>
      <div class="highlight">
        <a class="endpoint">
          <span class="get-badge">get</span>
          <span>/apps</span>
        </a>
        <a class="endpoint">
          <span class="post-badge">post</span>
          <span>/apps</span>
        </a>
        <a class="endpoint">
          <span class="get-badge">get</span>
          <span>/apps/{app_name}</span>
        </a>
        <a class="endpoint">
          <span class="delete-badge">delete</span>
          <span>/apps/{app_name}</span>
        </a>
      </div>
    </div>
  </div>
</div>

## List Apps

List all apps with the ability to filter by organization slug.

<div class="api-section" data-exclude-render>
  <div>
    <%= render(ApiInfoComponent.new(
      heading: "Query Parameters", 
      name: "org_slug", 
      type: "string", 
      required: true, 
      description: "The org slug, or 'personal', to filter apps"
    )) %>
    <%= render(ApiInfoComponent.new(
      heading: "Responses", 
      name: "200", 
      description: "OK"
    )) %>
  </div>
  <div> 
    <%= render(CodeToggleComponent.new(badge: 'GET', title: '/api/v1/users')) do |component| %>
      <% component.with_curl do %>
        curl --request GET \
          --url 'https://api.machines.dev/v1/apps?org_slug='
      <% end %>
      <% component.with_json do %>
        {
          "glossary": {
            "title": "example glossary",
            "GlossDiv": {
              "title": "S",
              "GlossList": {
                "GlossEntry": {
                  "ID": "SGML",
                  "SortAs": "SGML",
                  "GlossTerm": "Standard Generalized Markup Language",
                  "Acronym": "SGML",
                  "Abbrev": "ISO 8879:1986",
                  "GlossDef": {
                    "para": "A meta-markup language, used to create markup languages such as DocBook.",
                    "GlossSeeAlso": [
                      "GML",
                      "XML"
                    ]
                  },
                  "GlossSee": "markup"
                }
              }
            }
          }
        }
      <% end %>
      <% component.with_json_table do %>
        | Attribute  | Type                    | Required | Description|
        |------------|-------------------------|----------||
        | `layout`   | String<br>or<br>`false` | No       | The filename of the [layout](/docs/themes/architecture/layouts) to use when rendering the template. For example, specify `"full-width"` to render `layout/full-width.liquid`.<br>The default layout is `theme.liquid`.<br>Use the value `false` to render the template without a layout. Templates without a layout can't be customized in the theme editor.                                                                                                                                                                         |
        | `wrapper`  | String                  | No       | The HTML wrapper element for the template's sections. To learn more, refer to [The wrapper property](/docs/themes/architecture/templates/json-templates#the-wrapper-property).                                                                                                                                                                                                                                                                                                                                                       |
        | `sections` | Object                  | Yes      | An object that uses section IDs as keys, and section data as values. This attribute needs to contain at least one section.<br>Duplicate IDs within the template aren't allowed.<br>The format of the section data is the same as section data in [settings_data.json](/docs/themes/architecture/config/settings-data-json). To learn more, refer to [Section data](/docs/themes/architecture/templates/json-templates#section-data). JSON templates can render up to 25 sections, and each section can have up to 50 blocks.         |
        | `order`    | Array                   | Yes      | An array of section IDs, listed in the order that they should be rendered. The IDs must exist in the `sections` object. Duplicates are not allowed.                                                                                                                                                                                                                                                                                                                                                                                  |
      <% end %>
    <% end %>
    <%= render(CodeSampleComponent.new(title: '200', language: 'json')) do %>
      {
        "apps": [
          {
            "id": "…",
            "machine_count": 1,
            "name": "…",
            "network": {}
          }
        ],
        "total_apps": 1
      }
    <% end %>
  </div>
</div>
